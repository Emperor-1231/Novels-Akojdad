#!/bin/sh

#
# حقوق النشر © 2015-2021 المؤلفون الأصليون.
#
# مرخصة تحت رخصة Apache، الإصدار 2.0 ("الرخصة");
# لا يمكنك استخدام هذا الملف إلا وفقًا للرخصة.
# يمكنك الحصول على نسخة من الرخصة على العنوان
#      https://www.apache.org/licenses/LICENSE-2.0
#
# ما لم يكن ذلك مطلوبًا بموجب القانون أو متفقًا عليه كتابيًا، يتم توزيع البرمجيات
# الموزعة بموجب هذه الرخصة على أساس "كما هي"،
# دون أي ضمانات أو شروط من أي نوع، سواء كانت صريحة أو ضمنية.
# راجع الرخصة للحصول على التفاصيل الخاصة باللغة التي تحكم الأذونات
# والقيود بموجب الرخصة.
#

##############################################################################
#
#   نص بدء Gradle لأنظمة POSIX الذي تم إنشاؤه بواسطة Gradle.
#
#   مهم للتنفيذ:
#
#   (1) تحتاج إلى shell متوافق مع POSIX لتشغيل هذا النص. إذا كان /bin/sh الخاص بك
#       غير متوافق، ولكن لديك shell آخر متوافق مثل ksh أو
#       bash، فلتشغيل هذا النص، اكتب اسم ذلك shell قبل سطر الأوامر بالكامل، مثل:
#
#           ksh Gradle
#
#       لن تعمل Shells المخفضة مثل Busybox، لأن هذا النص
#       يتطلب جميع ميزات shell POSIX التالية:
#         * الدوال؛
#         * التوسعات «$var»، «${var}»، «${var:-default}»، «${var+SET}»،
#           «${var#prefix}»، «${var%suffix}»، و«$( cmd )»؛
#         * أوامر مركبة لها حالة خروج قابلة للاختبار، خاصة «case»؛
#         * أوامر مدمجة مختلفة بما في ذلك «command»، «set»، و«ulimit».
#
#   مهم للتصحيح:
#
#   (2) يستهدف هذا النص أي shell متوافق مع POSIX، لذا يتجنب الامتدادات المقدمة
#       بواسطة Bash، Ksh، إلخ؛ على وجه الخصوص يتم تجنب المصفوفات.
#
#       الممارسة "التقليدية" لتعبئة معلمات متعددة في سلسلة مفصولة بمسافات
#       هي مصدر معروف للأخطاء والمشاكل الأمنية، لذا يتم تجنب ذلك (بشكل عام)،
#       عن طريق تجميع الخيارات تدريجيًا في "$@"، وفي النهاية تمرير ذلك إلى Java.
#
#       عندما تعتمد المتغيرات البيئية الموروثة (DEFAULT_JVM_OPTS، JAVA_OPTS،
#       وGRADLE_OPTS) على تقسيم الكلمات، يتم ذلك بشكل صريح؛
#       راجع التعليقات المضمنة للحصول على التفاصيل.
#
#       هناك تعديلات لأنظمة تشغيل محددة مثل AIX، CygWin،
#       Darwin، MinGW، وNonStop.
#
#   (3) تم إنشاء هذا النص من قالب Groovy
#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       داخل مشروع Gradle.
#
#       يمكنك العثور على Gradle على العنوان https://github.com/gradle/gradle/.
#
##############################################################################

# محاولة تعيين APP_HOME

# حل الروابط: $0 قد يكون رابطًا
app_path=$0

# نحتاج هذا للروابط المتسلسلة.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # يترك / في النهاية؛ فارغ إذا لم يكن هناك مسار رئيسي
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# هذا غير مستخدم عادةً
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

# إضافة وسيطات JVM الافتراضية هنا. يمكنك أيضًا استخدام JAVA_OPTS وGRADLE_OPTS لتمرير وسيطات JVM إلى هذا النص.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# استخدم الحد الأقصى المتاح، أو قم بتعيين MAX_FD != -1 لاستخدام تلك القيمة.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# دعم نظام التشغيل (يجب أن يكون 'true' أو 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# تحديد أمر Java لبدء JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # JDK الخاص بـ IBM على AIX يستخدم مواقع غريبة للملفات التنفيذية
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# زيادة الحد الأقصى لوصفات الملفات إذا أمكن.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # في shell POSIX، ulimit -H غير معرف. لهذا السبب يتم التحقق من النتيجة لمعرفة ما إذا كانت تعمل.
        # shellcheck disable=SC3045 
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # في shell POSIX، ulimit -n غير معرف. لهذا السبب يتم التحقق من النتيجة لمعرفة ما إذا كانت تعمل.
        # shellcheck disable=SC3045 
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# جمع جميع الوسيطات لأمر Java، مع الترتيب العكسي:
#   * الوسيطات من سطر الأوامر
#   * اسم الفئة الرئيسية
#   * -classpath
#   * إعدادات -D...appname
#   * --module-path (فقط إذا كان مطلوبًا)
#   * متغيرات البيئة DEFAULT_JVM_OPTS، JAVA_OPTS، وGRADLE_OPTS.

# بالنسبة لـ Cygwin أو MSYS، قم بتحويل المسارات إلى تنسيق Windows قبل تشغيل Java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # الآن قم بتحويل الوسيطات - حيلة للحد من أنفسنا إلى /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # لا تعبث بالخيارات #(
              /?*)  t=${arg#/} t=/${t%%/*}              # يبدو كمسار ملف POSIX
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # لف قائمة الوسيطات تمامًا بعدد المرات التي تساوي عدد
        # الوسيطات، بحيث يعود كل وسيط إلى موضعه الأصلي، ولكن
        # مع تعديل محتمل.
        #
        # ملاحظة: حلقة `for` تلتقط قائمة التكرار قبل أن تبدأ، لذا
        # تغيير المعلمات الموضعية هنا لا يؤثر على عدد التكرارات،
        # ولا على القيم المقدمة في `arg`.
        shift                   # إزالة الوسيط القديم
        set -- "$@" "$arg"      # إضافة الوسيط المعدل
    done
fi

# جمع جميع الوسيطات لأمر Java؛
#   * $DEFAULT_JVM_OPTS، $JAVA_OPTS، و$GRADLE_OPTS يمكن أن تحتوي على أجزاء من
#     نص shell بما في ذلك الاقتباسات واستبدال المتغيرات، لذا ضعها في
#     اقتباسات مزدوجة للتأكد من إعادة توسيعها؛ و
#   * ضع كل شيء آخر في اقتباسات مفردة، حتى لا يتم إعادة توسيعه.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# توقف عندما لا يكون "xargs" متاحًا.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# استخدم "xargs" لتحليل الوسيطات المقتبسة.
#
# مع -n1 يخرج وسيطًا واحدًا لكل سطر، مع إزالة الاقتباسات والشرطات المائلة.
#
# في Bash يمكننا ببساطة القيام بما يلي:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# ولكن shell POSIX لا يحتوي على مصفوفات أو استبدال الأوامر، لذا بدلاً من ذلك
# نقوم بمعالجة كل وسيط (كسطر من الإدخال إلى sed) لإضافة شرطة مائلة عكسية لأي
# حرف قد يكون حرفًا خاصًا في shell، ثم نستخدم eval لعكس
# هذه العملية (مع الحفاظ على الفصل بين الوسيطات)، ونلف
# كل شيء في عبارة "set" واحدة.
#
# هذا بالطبع سينكسر إذا كان أي من هذه المتغيرات يحتوي على سطر جديد أو
# اقتباس غير متطابق.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"